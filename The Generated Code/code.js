



// JS

function Emulate6502( cpu, memory ) {
    const A = cpu.A, X = cpu.X, Y = cpu.Y, SP = cpu.SP, PC = cpu.PC, SR = cpu.SR, carry = SR&1, zero = (SR>>1)&1, interrupt = (SR>>2)&1, decimal = (SR>>3)&1, overflow = (SR>>6)&1, negative = (SR>>7)&1;
    if( instruction == 0x00 ) { const LL = memory[(PC+1)&0xFFFF]; const readWord = memory[(0xFFFE)&0xFFFF] + (memory[((0xFFFE)+1)&0xFFFF]<<8); const newSP = SP - 3; const newPC = (readWord)&0xFFFF; cpu.SP = newSP; cpu.PC = newPC; const carry = SR&1; const zero = (SR>>1)&1; const interrupt = 0x1;const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); *PC = readWord;memory[(SP - 2)&0xFFFF] = SR | 0x10; memory[(SP - 1)&0xFFFF] = (PC + 2)&0xFF; memory[((SP - 1)+1)&0xFFFF] = ((PC + 2)>>8&0xFF; return true; }
    if( instruction == 0x01 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = A | readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x05 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = A | readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x06 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = readByte << 1; const carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x08 ) { const newSP = SP - 1; cpu.SP = newSP; cpu.PC = PC + 1; memory[(SP)&0xFFFF] = SR | 0x30; return true; }
    if( instruction == 0x09 ) { const LL = memory[(PC+1)&0xFFFF]; const result = A | LL; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x0A ) { const result = A << 1; const newA = result; cpu.A = newA; const carry = A >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x0D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = A | readByte; const newA = result; cpu.A = newA; cpu.PC = PC + 3; return true; }
    if( instruction == 0x0E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = readByte << 1; const carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x10 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (negative-1)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (negative-1));return true; }
    if( instruction == 0x11 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord + Y)&0xFFFF]; const result = A | readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x15 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = A | readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x16 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = readByte << 1; const carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x18 ) { const carry = 0x0;const zero = (SR>>1)&1; const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x19 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + Y)&0xFFFF]; const result = A | readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x1D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = A | readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x1E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = readByte << 1; const carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x20 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const newSP = SP - 2; const newPC = (HHLL)&0xFFFF; cpu.SP = newSP; cpu.PC = newPC; *PC = HHLL;memory[(SP - 1)&0xFFFF] = (PC + 3)&0xFF; memory[((SP - 1)+1)&0xFFFF] = ((PC + 3)>>8&0xFF; return true; }
    if( instruction == 0x21 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = A & readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x24 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = A & readByte; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = readByte >> 6;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x25 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = A & readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x26 ) { const LL = memory[(PC+1)&0xFFFF], readByte = memory[(LL)&0xFFFF], result = (readByte << 1) + carry, carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x28 ) { const readByte = memory[(SP + 1)&0xFFFF]; const result = readByte; const newSP = SP + 1; cpu.SP = newSP; const carry = result;const zero = (result | -result) >> 7;const interrupt = result >> 2;const decimal = result >> 3;const overflow = 0;const negative = result >> 6;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x29 ) { const LL = memory[(PC+1)&0xFFFF]; const result = A & LL; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x2A ) { const result = (A << 1) + carry; const newA = result; cpu.A = newA; const carry = A >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x2C ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = A & readByte; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = readByte >> 6;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x2D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = A & readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x2E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = (readByte << 1) + carry; const carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x30 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (-negative)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (-negative));return true; }
    if( instruction == 0x31 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord + Y)&0xFFFF]; const result = A & readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x35 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = A & readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x36 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = (readByte << 1) + carry; const carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x38 ) { const carry = 0x1;const zero = (SR>>1)&1; const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x39 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + Y)&0xFFFF]; const result = A & readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x3D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = A & readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x3E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = (readByte << 1) + carry; const carry = readByte >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x40 ) { const readByte = memory[(SP + 1)&0xFFFF]; const readWord = memory[(SP + 3)&0xFFFF] + (memory[((SP + 3)+1)&0xFFFF]<<8); const newSP = SP + 3; const newPC = (readWord)&0xFFFF; cpu.SP = newSP; cpu.PC = newPC; const carry = result;const zero = result >> 1;const interrupt = result >> 2;const decimal = result >> 3;const overflow = 0;const negative = result >> 6;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); *PC = readWord;return true; }
    if( instruction == 0x41 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = A ^ readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x45 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = A ^ readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x46 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = readByte >> 1; const newA = result; cpu.A = newA; const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x48 ) { const newSP = SP - 1; cpu.SP = newSP; cpu.PC = PC + 1; memory[(SP)&0xFFFF] = A; return true; }
    if( instruction == 0x49 ) { const LL = memory[(PC+1)&0xFFFF]; const result = A ^ LL; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x4A ) { const result = A >> 1; const newA = result; cpu.A = newA; const carry = A;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x4C ) { const newPC = (HHLL)&0xFFFF; cpu.PC = newPC; *PC = HHLL;return true; }
    if( instruction == 0x4D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = A ^ readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x4E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = readByte >> 1; const newA = result; cpu.A = newA; const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x50 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (overflow-1)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (overflow-1));return true; }
    if( instruction == 0x51 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord + Y)&0xFFFF]; const result = A ^ readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x55 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = A ^ readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x56 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = readByte >> 1; const newA = result; cpu.A = newA; const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x58 ) { const carry = SR&1; const zero = (SR>>1)&1; const interrupt = 0x0;const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x59 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + Y)&0xFFFF]; const result = A ^ readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x5D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = A ^ readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x5E ) { const readByte = memory[(HHLL + X)&0xFFFF]; const result = readByte >> 1; const newA = result; cpu.A = newA; const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x60 ) { const readWord = memory[(SP + 1)&0xFFFF] + (memory[((SP + 1)+1)&0xFFFF]<<8); const newSP = SP + 2; const newPC = (readWord)&0xFFFF; cpu.SP = newSP; cpu.PC = newPC; *PC = readWord;return true; }
    if( instruction == 0x61 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = A + readByte + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x65 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = A + readByte + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x66 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = (readByte >> 1) + (carry << 7); const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x68 ) { const readByte = memory[(SP + 1)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x69 ) { const LL = memory[(PC+1)&0xFFFF]; const result = A + LL + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x6A ) { const result = (A >> 1) + (carry << 7); const newA = result; cpu.A = newA; const carry = A;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x6C ) { const readWord = memory[(HHLL)&0xFFFF] + (memory[((HHLL)+1)&0xFFFF]<<8); const newPC = (readWord)&0xFFFF; cpu.PC = newPC; *PC = readWord;return true; }
    if( instruction == 0x6D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = A + readByte + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x6E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = (readByte >> 1) + (carry << 7); const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x70 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (-overflow)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (-overflow));return true; }
    if( instruction == 0x71 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord + Y)&0xFFFF]; const result = A + readByte + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x75 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = A + readByte + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0x76 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = (readByte >> 1) + (carry << 7); const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x78 ) { const carry = SR&1; const zero = (SR>>1)&1; const interrupt = 0x1;const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x79 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + Y)&0xFFFF]; const result = A + readByte + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x7D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = A + readByte + carry; const newA = result; cpu.A = newA; const carry = (A - result) >> 7;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ((A ^ result) & (readByte ^ result)) >> 7;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0x7E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = (readByte >> 1) + (carry << 7); const carry = readByte;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0x81 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); cpu.PC = PC + 2; memory[(zeroPageWord)&0xFFFF] = A; return true; }
    if( instruction == 0x84 ) { const LL = memory[(PC+1)&0xFFFF]; cpu.PC = PC + 2; memory[(LL)&0xFFFF] = Y; return true; }
    if( instruction == 0x85 ) { const LL = memory[(PC+1)&0xFFFF]; cpu.PC = PC + 2; memory[(LL)&0xFFFF] = A; return true; }
    if( instruction == 0x86 ) { const LL = memory[(PC+1)&0xFFFF]; cpu.PC = PC + 2; memory[(LL)&0xFFFF] = X; return true; }
    if( instruction == 0x88 ) { const result = Y - 1; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x8A ) { const result = X; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x8C ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); cpu.PC = PC + 3; memory[(HHLL)&0xFFFF] = Y; return true; }
    if( instruction == 0x8D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); cpu.PC = PC + 3; memory[(HHLL)&0xFFFF] = A; return true; }
    if( instruction == 0x8E ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); cpu.PC = PC + 3; memory[(HHLL)&0xFFFF] = X; return true; }
    if( instruction == 0x90 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (carry-1)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (carry-1));return true; }
    if( instruction == 0x91 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); cpu.PC = PC + 2; memory[(zeroPageWord + Y)&0xFFFF] = A; return true; }
    if( instruction == 0x94 ) { const LL = memory[(PC+1)&0xFFFF]; cpu.PC = PC + 2; memory[((LL + X) & 0xFF)&0xFFFF] = Y; return true; }
    if( instruction == 0x95 ) { const LL = memory[(PC+1)&0xFFFF]; cpu.PC = PC + 2; memory[((LL + X) & 0xFF)&0xFFFF] = A; return true; }
    if( instruction == 0x96 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); cpu.PC = PC + 2; memory[(zeroPageWord + Y)&0xFFFF] = X; return true; }
    if( instruction == 0x98 ) { const result = Y; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0x99 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); cpu.PC = PC + 3; memory[(HHLL + Y)&0xFFFF] = A; return true; }
    if( instruction == 0x9A ) { const result = X; const newSP = result; cpu.SP = newSP; cpu.PC = PC + 1; return true; }
    if( instruction == 0x9D ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); cpu.PC = PC + 3; memory[(HHLL + X)&0xFFFF] = A; return true; }
    if( instruction == 0xA0 ) { const LL = memory[(PC+1)&0xFFFF]; const result = LL; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xA1 ) { const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xA2 ) { const LL = memory[(PC+1)&0xFFFF]; const result = LL; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xA4 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = readByte; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xA5 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xA6 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = readByte; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xA8 ) { const result = A; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xA9 ) { const LL = memory[(PC+1)&0xFFFF]; const result = LL; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xAA ) { const result = A; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xAC ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = readByte; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xAD ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xAE ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = readByte; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xB0 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (-carry)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (-carry));return true; }
    if( instruction == 0xB1 ) { const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord + Y)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xB4 ) { const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = readByte; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xB5 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xB6 ) { const readByte = memory[((LL + Y) & 0xFF)&0xFFFF]; const result = readByte; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xB8 ) { const carry = SR&1; const zero = (SR>>1)&1; const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = 0x0;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xB9 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + Y)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xBA ) { const result = SP; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xBC ) { const readByte = memory[(HHLL + X)&0xFFFF]; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xBD ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = readByte; const newA = result; cpu.A = newA; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xBE ) { const readByte = memory[(HHLL + Y)&0xFFFF]; const result = readByte; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xC0 ) { const LL = memory[(PC+1)&0xFFFF]; const result = Y - LL; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xC1 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = A - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xC4 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = Y - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xC5 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = A - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xC6 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = readByte - 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0xC8 ) { const result = Y + 1; const newY = result; cpu.Y = newY; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xC9 ) { const LL = memory[(PC+1)&0xFFFF]; const result = A - LL; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xCA ) { const result = X - 1; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xCC ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = Y - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xCD ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = A - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xCE ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = readByte - 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0xD0 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (zero-1)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (zero-1));return true; }
    if( instruction == 0xD1 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL)&0xFF] + (memory[((LL)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord + YY)&0xFFFF]; const result = A - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xD5 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = A - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xD6 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = readByte - 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0xD8 ) { const carry = SR&1; const zero = (SR>>1)&1; const interrupt = (SR>>2)&1; const decimal = 0x0;const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xD9 ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + Y)&0xFFFF]; const result = A - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xDD ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = A - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xDE ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = readByte - 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0xE0 ) { const LL = memory[(PC+1)&0xFFFF]; const result = X - LL; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xE1 ) { const LL = memory[(PC+1)&0xFFFF]; const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord)&0xFFFF]; const result = A - readByte - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xE4 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = X - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xE5 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = A - readByte - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xE6 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[(LL)&0xFFFF]; const result = readByte + 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0xE8 ) { const result = X + 1; const newX = result; cpu.X = newX; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xE9 ) { const LL = memory[(PC+1)&0xFFFF]; const result = A - LL - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xEA ) { cpu.PC = PC + 1; return true; }
    if( instruction == 0xEC ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = X - readByte; const carry = 1 - (result >> 7);const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xED ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = A - readByte - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xEE ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL)&0xFFFF]; const result = readByte + 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0xF0 ) { const LL = memory[(PC+1)&0xFFFF]; const newPC = (PC + 2 + (LL & (-zero)))&0xFFFF; cpu.PC = newPC; *PC = PC + 2 + (LL & (-zero));return true; }
    if( instruction == 0xF1 ) { const zeroPageWord = memory[(LL + X)&0xFF] + (memory[((LL + X)+1)&0xFF]<<8); const readByte = memory[(zeroPageWord + Y)&0xFFFF]; const result = A - readByte - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xF5 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = A - readByte - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; return true; }
    if( instruction == 0xF6 ) { const LL = memory[(PC+1)&0xFFFF]; const readByte = memory[((LL + X) & 0xFF)&0xFFFF]; const result = readByte + 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 2; memory[(readByteAddress)&0xFFFF] = result; return true; }
    if( instruction == 0xF8 ) { const carry = SR&1; const zero = (SR>>1)&1; const interrupt = (SR>>2)&1; const decimal = 0x1;const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xF9 ) { const readByte = memory[(HHLL + Y)&0xFFFF]; const result = A - readByte - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 1; return true; }
    if( instruction == 0xFD ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = A - readByte - (carry^1); const newA = result; cpu.A = newA; const carry = ???;const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = ???;cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; return true; }
    if( instruction == 0xFE ) { const LL = memory[(PC+1)&0xFFFF]; const HH = memory[(PC+2)&0xFFFF]; const HHLL = LL + (HH<<8); const readByte = memory[(HHLL + X)&0xFFFF]; const result = readByte + 1; const carry = SR&1; const zero = (result | -result) >> 7;const interrupt = (SR>>2)&1; const decimal = (SR>>3)&1; const overflow = (SR>>6)&1; const negative = (SR>>7)&1; cpu.SR = carry + (zero<<1) + (interrupt<<2) + (decimal<<3) + (overflow<<6) + (negative<<7); cpu.PC = PC + 3; memory[(readByteAddress)&0xFFFF] = result; return true; }
    return false
}


